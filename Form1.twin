[Description("")]
[FormDesignerId("37210311-8892-4D28-847A-B46119518E4B")]
[PredeclaredId]
Class Form1
/*
Multi-path Context Menu Demo
v1.3
Show an IContextMenu for files across multiple paths (and drives!)
by Jon Johnson
https://github.com/fafalone/MultiPathContextMenu

This method takes advantage of two new features in Windows 7+, Libraries, and Search
Folders. Libraries were created for the express purpose of combining multiple paths as 
one, so it's a natural fit. Unlike some other methods for this, using Libraries helps
ensure that it works smoothly even when files are spread across drive letters. We're not 
backed by an Explorer window here, so we need a way of getting only the folders and 
files we need. For that we hook it up with search.

First, the search scope is set: We take the set of full paths and create a de-duplicated
list of folders, then add them to a new Shell Library object (purely virtual, it's not
creating a .library-ms file). 

Then, we use the SearchFolderItemFactory class and create a condition for it that matches
only our exact files-- while this is a shell search, you can search by PROPERTYKEY, and the
PKEY_ItemPathDisplay key is a string containing the full file path, so we can match exactly 
what we want but not mix up e.g. if files with the same name exist in 2+ folders but only 
one was requested.

Finally, that gives us a result as an IShellItem representing a folder containing our files.
And only our files. So we enumerate all the items, get pidls for them, then create an 
IShellItemArray that's based on the search folder, so the pidls are all single level and
work for a context menu. All that's left is to query it for IContextMenu and display!

If you know a better method, that displays the complete context menu you'd get in a real 
Library, by all means share. I tried many other methods; DEFCONTEXTMENU omitted most items
even if the proper registry keys were opened, for example. Multiple people mention using
an IShellFolder implementation, but never any details or source.


**Requirements**
Windows 7+
This code depends on my WinDevLib package.

**Changelog**
v1.3 (23 Jun 2025) - The original version froze if you pass a folder in the drive root, e.g.
                     C:\folder. Numerous methods using documented features were unsuccessful
                     in preventing this, so the standard method now resorts to minimal use of
                     the undocumented ISearchFolderItemFactoryPriv interface. That's not present
                     on Win10+, so we have a fallback for ISearchFolderItemFactoryPrivEx which
                     contains the same method we're interested it. It doesn't use any scope
                     factory or scope APIs, so should be compatible with all current Windows.
                     The original method is included if you want to continue exploring solutions
                     that don't rely on undocumented magic.
                     This also appears to resolve an issue where it froze on certain files,
                     like explorer.exe.
v1.2 (22 Jun 2025) - Demonstration of 2 similar more efficient methods of setting the search
                     scope, using undocumented interfaces and APIs, see SHUndoc.twin for 
                     details. Note whether these work on Vista/7 and 11+ is unknown, I'm only
                     sure about 8 and 10. For most apps, I recommend sticking to the original
                     method, which uses all documented interfaces/APIs.
v1.1 (18 Jun 2025) - Support IContextMenu3/2 HandleMenuMsg routing; fix custom owner/coord use
v1.0 (17 Jun 2025) - Initial release.

*/
Option Explicit

    Private mCtx2 As IContextMenu2
    Private mCtx3 As IContextMenu3
    
    Private Sub Form_Load() Handles Form.Load
        Subclass2 Me.hWnd, AddressOf FormWndProc, Me.hWnd
    End Sub
    
    Private Sub Form_Unload(Cancel As Integer) Handles Form.Unload
        Set mCtx3 = Nothing
        Set mCtx2 = Nothing
        UnSubclass2 Me.hWnd, AddressOf FormWndProc, Me.hWnd
    End Sub
    
    Private Sub Command1_Click() Handles Command1.Click
        If Text1.Text = "" Then
            MsgBox "Error: No files entered.", vbCritical Or vbOKOnly, App.Title
            Exit Sub
        End If
        Dim sFiles() As String = Split(Text1.Text, vbCrLf)
        For i As Long = 0 To UBound(sFiles)
            If PathFileExists(sFiles(i)) = CFALSE Then
                MsgBox "Error: All files must exist; " & sFiles(i) & " was not found.", vbCritical Or vbOKOnly, App.Title
                Exit Sub
            End If
        Next
        MultiPathContextMenu(sFiles, Me.hWnd)
    End Sub
    
    Private Sub Command2_Click() Handles Command2.Click
        If Text1.Text = "" Then
            MsgBox "Error: No files entered.", vbCritical Or vbOKOnly, App.Title
            Exit Sub
        End If
        Dim sFiles() As String = Split(Text1.Text, vbCrLf)
        For i As Long = 0 To UBound(sFiles)
            If PathFileExists(sFiles(i)) = CFALSE Then
                MsgBox "Error: All files must exist; " & sFiles(i) & " was not found.", vbCritical Or vbOKOnly, App.Title
                Exit Sub
            End If
        Next
        MultiPathContextMenuEx(sFiles, Me.hWnd)
    End Sub
    
    Private Sub Command3_Click() Handles Command3.Click
        If Text1.Text = "" Then
            MsgBox "Error: No files entered.", vbCritical Or vbOKOnly, App.Title
            Exit Sub
        End If
        Dim sFiles() As String = Split(Text1.Text, vbCrLf)
        For i As Long = 0 To UBound(sFiles)
            If PathFileExists(sFiles(i)) = CFALSE Then
                MsgBox "Error: All files must exist; " & sFiles(i) & " was not found.", vbCritical Or vbOKOnly, App.Title
                Exit Sub
            End If
        Next
        MultiPathContextMenuEx2(sFiles, Me.hWnd)
    End Sub
    Private Sub Command4_Click() Handles Command4.Click
        If Text1.Text = "" Then
            MsgBox "Error: No files entered.", vbCritical Or vbOKOnly, App.Title
            Exit Sub
        End If
        Dim sFiles() As String = Split(Text1.Text, vbCrLf)
        For i As Long = 0 To UBound(sFiles)
            If PathFileExists(sFiles(i)) = CFALSE Then
                MsgBox "Error: All files must exist; " & sFiles(i) & " was not found.", vbCritical Or vbOKOnly, App.Title
                Exit Sub
            End If
        Next
        MultiPathContextMenuOrig(sFiles, Me.hWnd)
    End Sub
       
    Private Function MultiPathContextMenu(sFiles() As String, ByVal hOwner As LongPtr, Optional ByVal ptX As Long = -1, Optional ByVal ptY As Long = -1, Optional ByVal dwFlags As QueryContextMenuFlags = CMF_EXPLORE) As Long
        On Error GoTo e0
        Dim pSearchFact As ISearchFolderItemFactory
        Set pSearchFact = New SearchFolderItemFactory
        Dim piaScope As IShellItemArray
        Dim hr As Long
        If CreateSearchScope(sFiles, piaScope) = S_OK Then
            On Error Resume Next
            Dim pPriv As ISearchFolderItemFactoryPriv
            Dim pPrivEx As ISearchFolderItemFactoryPrivEx
            Set pPriv = pSearchFact
            If pPriv Is Nothing Then
                Set pPrivEx = pSearchFact
                If pPrivEx Is Nothing Then
                    Debug.Print CurrentProcedureName & "->Couldn't create private search object."
                    Return E_NOINTERFACE
                End If
                pPrivEx.SetScopeWithDepth(piaScope, SI_DEPTH_SHALLOW)
            Else
                pPriv.SetScopeWithDepth(piaScope, SI_DEPTH_SHALLOW)
            End If
            On Error GoTo e0
            pSearchFact.SetDisplayName StrPtr("TempResults")
            Dim pCond As ICondition
            If GetCondition(sFiles, pCond) = S_OK Then
                pSearchFact.SetCondition pCond
                Dim siRes As IShellItem, pidlRes As LongPtr
                Dim pEnum As IEnumShellItems, siChild As IShellItem
                pSearchFact.GetShellItem IID_IShellItem, siRes
                If siRes IsNot Nothing Then
                    Dim pidlFQ() As LongPtr, pidlRel() As LongPtr, nPidl As Long, pidlTmp As LongPtr
                    SHGetIDListFromObject(siRes, pidlRes)
                    siRes.BindToHandler(0, BHID_EnumItems, IID_IEnumShellItems, pEnum)
                    If pEnum IsNot Nothing Then
                        Do While pEnum.Next(1, siChild) = S_OK
                            ReDim Preserve pidlFQ(nPidl)
                            ReDim Preserve pidlRel(nPidl)
                            SHGetIDListFromObject(siChild, pidlTmp)
                            pidlFQ(nPidl) = ILClone(pidlTmp)
                            pidlRel(nPidl) = ILFindLastID(pidlFQ(nPidl))
                            CoTaskMemFree pidlTmp
                            nPidl += 1
                        Loop
                        Dim ppsia As IShellItemArray
                        Dim pCtx As IContextMenu
                        SHCreateShellItemArray(pidlRes, Nothing, UBound(pidlRel) + 1, pidlRel(0), ppsia)
                        ppsia.BindToHandler(0, BHID_SFUIObject, IID_IContextMenu, pCtx)
                        hr = DisplayContextMenu(pCtx, hOwner, ptX, ptY, dwFlags)
                        FreeIDListArray(pidlFQ, UBound(pidlFQ) + 1)
                        Set pCtx = Nothing
                        Set ppsia = Nothing
                        Set pEnum = Nothing
                    Else
                        Debug.Print "MultiPathContextMenu::Couldn't get folder enumerator."
                    End If
                    CoTaskMemFree pidlRes
                End If
            End If
            Set pCond = Nothing
            Set siRes = Nothing
            Set pSearchFact = Nothing
        Else
            Debug.Print "MultiPathContextMenu::Couldn't create scope."
        End If
        Set piaScope = Nothing
        Exit Function
    e0:
        Debug.Print CurrentProcedureName & "->Unexpected error 0x" & Hex$(Err.Number) & ", " & Err.Description
    End Function
    
    Private Function MultiPathContextMenuEx(sFiles() As String, ByVal hOwner As LongPtr, Optional ByVal ptX As Long = -1, Optional ByVal ptY As Long = -1, Optional ByVal dwFlags As QueryContextMenuFlags = CMF_EXPLORE) As Long
        Dim pSearchFact As ISearchFolderItemFactory
        Set pSearchFact = New SearchFolderItemFactory
        Dim piaScope As IShellItemArray
        Dim hr As Long
        Dim sFolders() As String
        GetFoldersForFiles sFiles, sFolders
        Dim apidl() As LongPtr
        ReDim apidl(UBound(sFolders))
        For i As Long = 0 To UBound(sFolders)
            apidl(i) = ILCreateFromPath(sFolders(i))
        Next
        Dim psFact As IScopeFactory
        Set psFact = New ScopeFactory
        Dim pScope As IScope
        psFact.CreateScopeFromIDLists(UBound(apidl) + 1, apidl(0), SI_TYPE_INCLUDE, SI_DEPTH_SHALLOW, 0, IID_IScope, pScope)
        If pScope IsNot Nothing Then
            Debug.Print "Got scope"
            Dim pSearchPriv As ISearchFolderItemFactoryPrivEx
            Set pSearchPriv = pSearchFact
            If pSearchPriv IsNot Nothing Then
                Debug.Print "Got private search factory"
                pSearchPriv.SetScopeDirect(pScope)
            End If
        End If
        Dim pCond As ICondition
        If GetCondition(sFiles, pCond) = S_OK Then
            pSearchFact.SetCondition pCond
            Dim siRes As IShellItem, pidlRes As LongPtr
            Dim pEnum As IEnumShellItems, siChild As IShellItem
            pSearchFact.GetShellItem IID_IShellItem, siRes
            If siRes IsNot Nothing Then
                Dim pidlFQ() As LongPtr, pidlRel() As LongPtr, nPidl As Long, pidlTmp As LongPtr
                SHGetIDListFromObject(siRes, pidlRes)
                siRes.BindToHandler(0, BHID_EnumItems, IID_IEnumShellItems, pEnum)
                If pEnum IsNot Nothing Then
                    Do While pEnum.Next(1, siChild) = S_OK
                        ReDim Preserve pidlFQ(nPidl)
                        ReDim Preserve pidlRel(nPidl)
                        SHGetIDListFromObject(siChild, pidlTmp)
                        pidlFQ(nPidl) = ILClone(pidlTmp)
                        pidlRel(nPidl) = ILFindLastID(pidlFQ(nPidl))
                        CoTaskMemFree pidlTmp
                        nPidl += 1
                    Loop
                    Dim ppsia As IShellItemArray
                    Dim pCtx As IContextMenu
                    SHCreateShellItemArray(pidlRes, Nothing, UBound(pidlRel) + 1, pidlRel(0), ppsia)
                    ppsia.BindToHandler(0, BHID_SFUIObject, IID_IContextMenu, pCtx)
                    hr = DisplayContextMenu(pCtx, hOwner, ptX, ptY, dwFlags)
                    FreeIDListArray(pidlFQ, UBound(pidlFQ) + 1)
                    Set pCtx = Nothing
                    Set ppsia = Nothing
                    Set pEnum = Nothing
                Else
                    Debug.Print "MultiPathContextMenu::Couldn't get folder enumerator."
                End If
                CoTaskMemFree pidlRes
            End If
        End If
        Set pCond = Nothing
        Set siRes = Nothing
        Set pSearchFact = Nothing
    End Function
    Private Function MultiPathContextMenuEx2(sFiles() As String, ByVal hOwner As LongPtr, Optional ByVal ptX As Long = -1, Optional ByVal ptY As Long = -1, Optional ByVal dwFlags As QueryContextMenuFlags = CMF_EXPLORE) As Long
        Dim pSearchFact As ISearchFolderItemFactory
        Set pSearchFact = New SearchFolderItemFactory
        Dim hr As Long
        Dim sFolders() As String
        GetFoldersForFiles sFiles, sFolders
        Dim apidl() As LongPtr
        ReDim apidl(UBound(sFolders))
        For i As Long = 0 To UBound(sFolders)
            apidl(i) = ILCreateFromPath(sFolders(i))
        Next
        Dim pScope As IScope
        SHCreateScopeFromIDListsEx(UBound(apidl) + 1, apidl(0), SI_TYPE_INCLUDE, SI_DEPTH_SHALLOW, 0, IID_IScope, pScope)
        If pScope IsNot Nothing Then
            Debug.Print "Got scope"
            Dim pSearchPriv As ISearchFolderItemFactoryPrivEx
            Set pSearchPriv = pSearchFact
            If pSearchPriv IsNot Nothing Then
                Debug.Print "Got private search factory"
                pSearchPriv.SetScopeDirect(pScope)
            End If
        End If
        Dim pCond As ICondition
        If GetCondition(sFiles, pCond) = S_OK Then
            pSearchFact.SetCondition pCond
            Dim siRes As IShellItem, pidlRes As LongPtr
            Dim pEnum As IEnumShellItems, siChild As IShellItem
            pSearchFact.GetShellItem IID_IShellItem, siRes
            If siRes IsNot Nothing Then
                Dim pidlFQ() As LongPtr, pidlRel() As LongPtr, nPidl As Long, pidlTmp As LongPtr
                SHGetIDListFromObject(siRes, pidlRes)
                siRes.BindToHandler(0, BHID_EnumItems, IID_IEnumShellItems, pEnum)
                If pEnum IsNot Nothing Then
                    Do While pEnum.Next(1, siChild) = S_OK
                        ReDim Preserve pidlFQ(nPidl)
                        ReDim Preserve pidlRel(nPidl)
                        SHGetIDListFromObject(siChild, pidlTmp)
                        pidlFQ(nPidl) = ILClone(pidlTmp)
                        pidlRel(nPidl) = ILFindLastID(pidlFQ(nPidl))
                        CoTaskMemFree pidlTmp
                        nPidl += 1
                    Loop
                    Dim ppsia As IShellItemArray
                    Dim pCtx As IContextMenu
                    SHCreateShellItemArray(pidlRes, Nothing, UBound(pidlRel) + 1, pidlRel(0), ppsia)
                    ppsia.BindToHandler(0, BHID_SFUIObject, IID_IContextMenu, pCtx)
                    hr = DisplayContextMenu(pCtx, hOwner, ptX, ptY, dwFlags)
                    FreeIDListArray(pidlFQ, UBound(pidlFQ) + 1)
                    Set pCtx = Nothing
                    Set ppsia = Nothing
                    Set pEnum = Nothing
                Else
                    Debug.Print "MultiPathContextMenu::Couldn't get folder enumerator."
                End If
                CoTaskMemFree pidlRes
            End If
        End If
        Set pCond = Nothing
        Set siRes = Nothing
        Set pSearchFact = Nothing
    End Function
    Private Function MultiPathContextMenuOrig(sFiles() As String, ByVal hOwner As LongPtr, Optional ByVal ptX As Long = -1, Optional ByVal ptY As Long = -1, Optional ByVal dwFlags As QueryContextMenuFlags = CMF_EXPLORE) As Long
        Dim pSearchFact As ISearchFolderItemFactory
        Set pSearchFact = New SearchFolderItemFactory
        Dim piaScope As IShellItemArray
        Dim hr As Long
        If CreateSearchScope(sFiles, piaScope) = S_OK Then
            pSearchFact.SetScope piaScope
            pSearchFact.SetDisplayName StrPtr("TempResults")
            Dim pCond As ICondition
            If GetCondition(sFiles, pCond) = S_OK Then
                pSearchFact.SetCondition pCond
                Dim siRes As IShellItem, pidlRes As LongPtr
                Dim pEnum As IEnumShellItems, siChild As IShellItem
                pSearchFact.GetShellItem IID_IShellItem, siRes
                If siRes IsNot Nothing Then
                    Dim pidlFQ() As LongPtr, pidlRel() As LongPtr, nPidl As Long, pidlTmp As LongPtr
                    SHGetIDListFromObject(siRes, pidlRes)
                    siRes.BindToHandler(0, BHID_EnumItems, IID_IEnumShellItems, pEnum)
                    If pEnum IsNot Nothing Then
                        Do While pEnum.Next(1, siChild) = S_OK
                            ReDim Preserve pidlFQ(nPidl)
                            ReDim Preserve pidlRel(nPidl)
                            SHGetIDListFromObject(siChild, pidlTmp)
                            pidlFQ(nPidl) = ILClone(pidlTmp)
                            pidlRel(nPidl) = ILFindLastID(pidlFQ(nPidl))
                            CoTaskMemFree pidlTmp
                            nPidl += 1
                        Loop
                        Dim ppsia As IShellItemArray
                        Dim pCtx As IContextMenu
                        SHCreateShellItemArray(pidlRes, Nothing, UBound(pidlRel) + 1, pidlRel(0), ppsia)
                        ppsia.BindToHandler(0, BHID_SFUIObject, IID_IContextMenu, pCtx)
                        hr = DisplayContextMenu(pCtx, hOwner, ptX, ptY, dwFlags)
                        FreeIDListArray(pidlFQ, UBound(pidlFQ) + 1)
                        Set pCtx = Nothing
                        Set ppsia = Nothing
                        Set pEnum = Nothing
                    Else
                        Debug.Print "MultiPathContextMenu::Couldn't get folder enumerator."
                    End If
                    CoTaskMemFree pidlRes
                End If
            End If
            Set pCond = Nothing
            Set siRes = Nothing
            Set pSearchFact = Nothing
        Else
            Debug.Print "MultiPathContextMenu::Couldn't create scope."
        End If
        Set piaScope = Nothing
    End Function
    Private Function DisplayContextMenu(ByVal pCtx As IContextMenu, ByVal hOwner As LongPtr, _
                            Optional ByVal ptX As Long = -1, Optional ByVal ptY As Long = -1, _
                            Optional ByVal dwFlags As QueryContextMenuFlags = CMF_EXPLORE) As Long
        If pCtx IsNot Nothing Then
            Debug.Print "Got context menu"
            On Error Resume Next
            Set mCtx3 = pCtx
            If mCtx3 Is Nothing Then
                Set mCtx2 = pCtx
            End If
            Dim hMenu As LongPtr = CreatePopupMenu()
            pCtx.QueryContextMenu(hMenu, 0, 1, &H7FFF&, dwFlags)
            If (ptX = -1) OrElse (ptY = -1) Then
                Dim pt As POINT
                GetCursorPos pt
                ptX = pt.x: ptY = pt.y
            End If
            Dim idCmd As Long = TrackPopupMenu(hMenu, TPM_LEFTBUTTON Or TPM_RIGHTBUTTON Or TPM_LEFTALIGN Or _
                                        TPM_TOPALIGN Or TPM_HORIZONTAL Or TPM_RETURNCMD, ptX, ptY, 0&, hOwner, 0&)
            Debug.Print "Command=" & idCmd
            If idCmd Then
                Dim cmi As CMINVOKECOMMANDINFO
                With cmi
                    .cbSize = LenB(cmi)
                    .hwnd = hOwner
                    .lpVerb = idCmd - 1 ' MAKEINTRESOURCE(idCmd-1);
                    .nShow = SW_SHOWNORMAL
                End With
                pCtx.InvokeCommand VarPtr(cmi)
            End If
            Set mCtx3 = Nothing
            Set mCtx2 = Nothing
            DestroyMenu hMenu
        End If
    End Function
    
    Private Function CreateSearchLibrary(pObC As IObjectCollection) As Long
    Set pObC = Nothing
    Dim pLib As IShellLibrary
    Set pLib = New ShellLibrary
    If (pLib Is Nothing) = False Then
        CreateSearchLibrary = pLib.GetFolders(LFF_ALLITEMS, IID_IObjectCollection, pObC)
    Else
        Debug.Print "CreateSearchLibrary->Failed to create ShellLibrary"
    End If
    End Function
    
    Private Function GetFoldersForFiles(sFiles() As String, sFolders() As String) As Long
        'Get a list of the folders our files are in, making sure to add each path only once.
        Dim sFolder As String
        Dim bAdded As Boolean
        Dim nFolders As Long
        ReDim sFolders(0)
        For i As Long = 0 To UBound(sFiles)
            sFolder = Left$(sFiles(i), InStrRev(sFiles(i), "\") - 1)
            If (Len(sFolder) = 2) AndAlso (Right$(sFolder, 1) = ":") Then sFolder &= "\"
            bAdded = False
            For j As Long = 0 To UBound(sFolders)
                If LCase$(sFolders(j)) = LCase$(sFolder) Then
                    bAdded = True: Exit For
                End If
            Next
            If bAdded = False Then
                ReDim Preserve sFolders(nFolders)
                sFolders(nFolders) = sFolder
                nFolders += 1
            End If
        Next
        Return nFolders
    End Function
    
    Private Function CreateSearchScope(sFiles() As String, ppia As IShellItemArray) As Long
    On Error GoTo e0
    Set ppia = Nothing
    Dim pObjects As IObjectCollection
    Dim hr As Long
    Dim sFolders() As String
    Dim nFolders As Long = GetFoldersForFiles(sFiles, sFolders)
    If nFolders Then
        Dim sia() As IShellItem
        ReDim sia(nFolders - 1)
        For i As Long = 0 To UBound(sFolders)
            SHCreateItemFromParsingName(sFolders(i), Nothing, IID_IShellItem, sia(i))
            Debug.Print "CreateSearchScope->CreateFolder " & sFolders(i) & ", " & (sia(i) IsNot Nothing)
        Next
        If CreateSearchLibrary(pObjects) = S_OK Then
            For j As Long = 0 To UBound(sia)
                pObjects.AddObject sia(j)
            Next
            Set ppia = pObjects
            Set pObjects = Nothing
        End If
    End If
    Return S_OK
    e0:
    Debug.Print "Error in " & CurrentProcedureName & ": 0x" & Hex$(Err.Number) & ", " & GetSystemErrorString(Err.Number)
    Return Err.Number
    End Function
    Private Function CreateSearchScope2(sFiles() As String, ppia As IShellItemArray) As Long
    On Error GoTo e0
    Set ppia = Nothing
    Dim hr As Long
    Dim sFolders() As String
    Dim nFolders As Long = GetFoldersForFiles(sFiles, sFolders)
    If nFolders Then
        Dim pidl() As LongPtr, nPidl As Long
        Dim pidlTemp As LongPtr
        For i As Long = 0 To UBound(sFolders)
            pidlTemp = ILCreateFromPath(sFolders(i))
            If pidlTemp Then
                ReDim Preserve pidl(nPidl)
                pidl(nPidl) = pidlTemp
                nPidl += 1
            End If
        Next
        If nPidl Then
            SHCreateShellItemArrayFromIDLists(nPidl, pidl(0), ppia)
            FreeIDListArray(pidl, nPidl)
        Else
            Debug.Print "Error: No parent folder pidls created."
            Return E_FAIL
        End If
    End If
    Return S_OK
    e0:
    Debug.Print "Error in " & CurrentProcedureName & ": 0x" & Hex$(Err.Number) & ", " & GetSystemErrorString(Err.Number)
    Return Err.Number
    End Function
    
    Private Function GetCondition(sFiles() As String, ppCondition As ICondition) As Long
    'Get a search ICondition object that matches only our exact files.
    Set ppCondition = Nothing
    GetCondition = -1
    Dim pFact As IConditionFactory2
    Set pFact = New ConditionFactory
    Dim pFile() As ICondition
    Dim nCds As Long = UBound(sFiles) + 1
    If (pFact Is Nothing) = False Then
        Dim nCOP As CONDITION_OPERATION = COP_EQUAL 'COP_VALUE_CONTAINS
        ReDim pFile(UBound(sFiles))
        For i As Long = 0 To UBound(sFiles)
            pFact.CreateStringLeaf PKEY_ItemPathDisplay, nCOP, StrPtr(sFiles(i)), 0&, CONDITION_CREATION_DEFAULT, IID_ICondition, pFile(i)
        Next
        If nCds = 1 Then
            'Only one condition, don't need an array
            Set ppCondition = pFile(0)
        Else
            pFact.CreateCompoundFromArray CT_OR_CONDITION, pFile(0), nCds, CONDITION_CREATION_DEFAULT, IID_ICondition, ppCondition
        End If
        If (ppCondition Is Nothing) = False Then GetCondition = S_OK
    
        Set pFact = Nothing
    Else
        Debug.Print "GetCondition->Failed to create factory."
    End If
    
    End Function
    
    Private Function Subclass2(hWnd As LongPtr, lpFN As LongPtr, Optional uId As LongPtr = 0&, Optional dwRefData As LongPtr = 0&) As Boolean
    If uId = 0 Then uId = hWnd
        Subclass2 = SetWindowSubclass(hWnd, lpFN, uId, dwRefData):      Debug.Assert Subclass2
    End Function

    Private Function UnSubclass2(hWnd As LongPtr, ByVal lpFN As LongPtr, pid As LongPtr) As Boolean
        UnSubclass2 = RemoveWindowSubclass(hWnd, lpFN, pid)
    End Function

    Private Function FormWndProc(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal uIdSubclass As LongPtr, ByVal dwRefData As LongPtr) As LongPtr

    Select Case uMsg
        Case WM_INITMENUPOPUP, WM_DRAWITEM, WM_MEASUREITEM, WM_MENUCHAR
            Dim lResult As Long
            On Error GoTo e1
            If (mCtx3 Is Nothing) = False Then
                Dim lRs3 As LongPtr
                Call mCtx3.HandleMenuMsg2(uMsg, wParam, lParam, lRs3)
                Return lRs3
            ElseIf (mCtx2 Is Nothing) = False Then
                Call mCtx2.HandleMenuMsg(uMsg, wParam, lParam)
            End If
        Case WM_DESTROY
            Call UnSubclass2(hWnd, AddressOf FormWndProc, uIdSubclass)
    End Select
    Return DefSubclassProc(hWnd, uMsg, wParam, lParam)
    e1:
    Debug.Print "FormWndProc->Warning(1): " & Err.Description & ", 0x" & Hex$(Err.Number)
    Resume Next
    End Function
    
    
End Class